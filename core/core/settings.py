"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=True)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=lambda v: [item.strip() for item in v.split(',')]) # noqa


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # 3rd Party Apps
    'django_jalali',

    # Local Apps
    'website.apps.WebsiteConfig',
    'accounts.apps.AccountsConfig',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'dashboard.apps.DashboardConfig',
    'order.apps.OrderConfig',
    'payment.apps.PaymentConfig',
    'review.apps.ReviewConfig',
    
    # 3rd Party Apps
    'ckeditor', 
    'django.forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.test_cart'
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('PGDB_NAME', default='postgres'),
#         'USER': config('PGDB_USER', default='postgres'),
#         'PASSWORD': config('PGDB_PASSWORD', default='postgres'),
#         'HOST': config('PGDB_HOST', default='db'),
#         'PORT': config('PGDB_PORT', default=5432, cast=int)
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = config('TIME_ZONE', default='UTC')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'

STATIC_ROOT = BASE_DIR / 'staticfiles'  # According to the rules of Gunicorn static directory are considered for another work # noqa
MEDIA_ROOT = BASE_DIR / 'media'

# for own static files and when run collectstatic command this director also considered
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# User Configuration
AUTH_USER_MODEL = 'accounts.User'

LOGOUT_REDIRECT_URL = 'website:index'

# SMTP Configuration
# if DEBUG:

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# else:

#     EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#     EMAIL_HOST = config('EMAIL_HOST', default='smtpdev')
#     EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=False)
#     EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)
#     EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)
#     EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
#     EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

PASSWORD_RESET_TIMEOUT_DAYS = 2

# django debug toolbar for docker usage
SHOW_DEBUGGER_TOOLBAR = config("SHOW_DEBUGGER_TOOLBAR", cast=bool, default=True)
if SHOW_DEBUGGER_TOOLBAR:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]
    import socket  # only if you haven't already imported this
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]


# Config Messages Tags
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
        messages.DEBUG: 'alert-secondary',
        messages.INFO: 'alert-info',
        messages.SUCCESS: 'alert-success',
        messages.WARNING: 'alert-warning',
        messages.ERROR: 'alert-danger',
}



CELERY_BROKER_URL = 'amqp://localhost'
from datetime import timedelta

# فراخوانی و تنظیمات جهت فراخوانی وظیفه ها به صورت خودکار
CELERY_BEAT_SCHEDULE = {
    'send_newsletter_emails': {
        'task': 'website.tasks.send_newsletter_emails_task',
        'schedule': timedelta(minutes=1),  # هر 24 ساعت یکبار
    },
}
from django.contrib.auth.password_validation import (
    MinimumLengthValidator,
    CommonPasswordValidator,
    NumericPasswordValidator,
)

# تنظیمات پیش‌فرض برای اعتبارسنجی رمز عبور
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#         "OPTIONS": {
#             "min_length": 8,
#         },
#         "ERROR_MESSAGES": {
#             "min_length": "رمز عبور باید حداقل ۸ کاراکتر داشته باشد.",
#         },
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#         "ERROR_MESSAGES": {
#             "password_too_common": "رمز عبور نمی‌تواند یکی از رمزهای متداول باشد.",
#         },
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#         "ERROR_MESSAGES": {
#             "password_entirely_numeric": "رمز عبور نمی‌تواند به طور کامل عددی باشد.",
#         },
#     },
#     # اعتبارسنجی سفارشی را اضافه کنید در اینجا
# ]
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
        "ERROR_MESSAGES": {
            "min_length": "رمز عبور باید حداقل ۸ کاراکتر داشته باشد.",
         },
    },

    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Ckeditor Config

CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"

# FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source']
        ]
    }
}


# Payment Gateway Config

MERCHANT_ID = config('MERCHANT_ID', default="4ced0a1e-4ad8-4309-9668-3ea3ae8e8897")


SANDBOX = config('SANDBOX', cast=bool, default=True)

